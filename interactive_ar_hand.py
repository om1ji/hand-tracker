import cv2
import mediapipe as mp
import numpy as np
import math
import os
from obj_loader import OBJLoader

class InteractiveARHandTracker:
    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MediaPipe
        self.mp_hands = mp.solutions.hands
        self.hands = self.mp_hands.Hands(
            static_image_mode=False,
            max_num_hands=2,
            min_detection_confidence=0.7,
            min_tracking_confidence=0.5
        )
        self.mp_draw = mp.solutions.drawing_utils
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–º–µ—Ä—ã
        self.cap = cv2.VideoCapture(0)
        self.cap.set(cv2.CAP_PROP_FRAME_WIDTH, 1280)
        self.cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 720)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—ä–µ–∫—Ç–∞
        self.object_size = 100  # –±–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä (—É–≤–µ–ª–∏—á–µ–Ω)
        self.object_rotation_x = 0  # –ø–æ–≤–æ—Ä–æ—Ç –ø–æ –æ—Å–∏ X (pitch)
        self.object_rotation_y = 0  # –ø–æ–≤–æ—Ä–æ—Ç –ø–æ –æ—Å–∏ Y (yaw)
        self.object_rotation_z = 0  # –ø–æ–≤–æ—Ä–æ—Ç –ø–æ –æ—Å–∏ Z (roll)
        # –ë–∞–∑–æ–≤—ã–µ —É–≥–ª—ã –ø–æ–≤–æ—Ä–æ—Ç–∞ (–∫–∞–∫ –≤ Blender - —Å–æ—Ö—Ä–∞–Ω—è—é—Ç —Ç–µ–∫—É—â–µ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏ –Ω–æ–≤–æ–º –∂–µ—Å—Ç–µ)
        self.base_rotation_x = 0
        self.base_rotation_y = 0
        self.base_rotation_z = 0
        self.object_position = [640, 360]  # –ø–æ–∑–∏—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞
        self.object_type = 0  # —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞
        
        # –°–æ—Å—Ç–æ—è–Ω–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.control_mode = "move"  # move, resize, rotate
        self.last_pinch_distance = None
        self.last_hand_position = None  # –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è —Ä—É–∫–∏ –≤ 3D
        self.gesture_cooldown = 0
        
        # –°–∏—Å—Ç–µ–º–∞ –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∂–µ—Å—Ç–æ–≤
        self.gesture_hold_time = {}  # —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —É–¥–µ—Ä–∂–∞–Ω–∏—è –∂–µ—Å—Ç–æ–≤
        self.gesture_activation_delay = 15  # 1 —Å–µ–∫—É–Ω–¥–∞ –ø—Ä–∏ 60 FPS
        self.current_gesture = None
        self.gesture_timer = 0
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        self.scale_factor = 1.0
        self.scale_direction = 1
        
        # –ó–∞–≥—Ä—É–∑—á–∏–∫ 3D –º–æ–¥–µ–ª–µ–π
        self.obj_loader = OBJLoader()
        self.custom_models = []
        self.load_custom_models()
        
    def load_custom_models(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ 3D –º–æ–¥–µ–ª–∏ –∏–∑ –ø–∞–ø–∫–∏ models"""
        models_dir = "models"
        if not os.path.exists(models_dir):
            os.makedirs(models_dir)
            print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ {models_dir} –¥–ª—è 3D –º–æ–¥–µ–ª–µ–π")
            print("üí° –ü–æ–º–µ—Å—Ç–∏—Ç–µ .obj —Ñ–∞–π–ª—ã –≤ —ç—Ç—É –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
            return
        
        obj_files = [f for f in os.listdir(models_dir) if f.endswith('.obj')]
        
        for obj_file in obj_files:
            filepath = os.path.join(models_dir, obj_file)
            loader = OBJLoader()
            
            if loader.load_obj(filepath):
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –º–æ–¥–µ–ª—å –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É
                loader.normalize_model(100)
                loader.triangulate_faces()
                
                model_data = {
                    'name': obj_file[:-4],  # —É–±–∏—Ä–∞–µ–º .obj
                    'vertices': loader.get_vertices(),
                    'faces': loader.get_faces(),
                    'loader': loader
                }
                self.custom_models.append(model_data)
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –º–æ–¥–µ–ª—å: {obj_file}")
        
        if self.custom_models:
            print(f"üéâ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.custom_models)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –º–æ–¥–µ–ª–µ–π")
        else:
            print("üìù –ù–µ—Ç .obj —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ models")

    def get_distance(self, point1, point2):
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏"""
        return math.sqrt((point1[0] - point2[0])**2 + (point1[1] - point2[1])**2)
    
    def get_angle(self, point1, point2):
        """–í—ã—á–∏—Å–ª—è–µ—Ç —É–≥–æ–ª –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏"""
        return math.atan2(point2[1] - point1[1], point2[0] - point1[0])
    
    def get_hand_orientation(self, landmarks, frame_width, frame_height):
        """–í—ã—á–∏—Å–ª—è–µ—Ç –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é —Ä—É–∫–∏ –≤ 3D –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ —Å –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –ø–æ –≤—Å–µ–º –æ—Å—è–º"""
        # –ö–ª—é—á–µ–≤—ã–µ —Ç–æ—á–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
        wrist = landmarks[0]
        thumb_tip = landmarks[4]    # –∫–æ–Ω—á–∏–∫ –±–æ–ª—å—à–æ–≥–æ –ø–∞–ª—å—Ü–∞
        pinky_tip = landmarks[20]   # –∫–æ–Ω—á–∏–∫ –º–∏–∑–∏–Ω—Ü–∞
        middle_tip = landmarks[12]  # –∫–æ–Ω—á–∏–∫ —Å—Ä–µ–¥–Ω–µ–≥–æ –ø–∞–ª—å—Ü–∞
        middle_mcp = landmarks[9]   # –æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –ø–∞–ª—å—Ü–∞
        index_tip = landmarks[8]    # –∫–æ–Ω—á–∏–∫ —É–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∞–ª—å—Ü–∞
        index_mcp = landmarks[5]    # –æ—Å–Ω–æ–≤–∞–Ω–∏–µ —É–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∞–ª—å—Ü–∞
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ø–∏–∫—Å–µ–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        wrist_pos = [wrist.x * frame_width, wrist.y * frame_height, wrist.z]
        thumb_pos = [thumb_tip.x * frame_width, thumb_tip.y * frame_height, thumb_tip.z]
        pinky_pos = [pinky_tip.x * frame_width, pinky_tip.y * frame_height, pinky_tip.z]
        middle_tip_pos = [middle_tip.x * frame_width, middle_tip.y * frame_height, middle_tip.z]
        middle_mcp_pos = [middle_mcp.x * frame_width, middle_mcp.y * frame_height, middle_mcp.z]
        index_tip_pos = [index_tip.x * frame_width, index_tip.y * frame_height, index_tip.z]
        index_mcp_pos = [index_mcp.x * frame_width, index_mcp.y * frame_height, index_mcp.z]
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –≤–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        # 1. ROLL (Z-axis) - –ø–æ–≤–æ—Ä–æ—Ç –ø–æ —á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–µ: –±–æ–ª—å—à–æ–π –ø–∞–ª–µ—Ü –∫ –º–∏–∑–∏–Ω—Ü—É
        thumb_to_pinky = [
            pinky_pos[0] - thumb_pos[0],
            pinky_pos[1] - thumb_pos[1],
            pinky_pos[2] - thumb_pos[2]
        ]
        
        # 2. PITCH (X-axis) - –Ω–∞–∫–ª–æ–Ω –≤–≤–µ—Ä—Ö/–≤–Ω–∏–∑: –æ—Ç –æ—Å–Ω–æ–≤–∞–Ω–∏—è –ª–∞–¥–æ–Ω–∏ –∫ –∫–æ–Ω—á–∏–∫—É —É–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∞–ª—å—Ü–∞
        wrist_to_index_tip = [
            index_tip_pos[0] - wrist_pos[0],
            index_tip_pos[1] - wrist_pos[1],
            index_tip_pos[2] - wrist_pos[2]
        ]
        
        # 3. YAW (Y-axis) - –ø–æ–≤–æ—Ä–æ—Ç –≤–ª–µ–≤–æ/–≤–ø—Ä–∞–≤–æ: –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –ø–∞–ª—å—Ü–∞
        middle_base_to_tip = [
            middle_tip_pos[0] - middle_mcp_pos[0],
            middle_tip_pos[1] - middle_mcp_pos[1],
            middle_tip_pos[2] - middle_mcp_pos[2]
        ]
        
        # –¶–µ–Ω—Ç—Ä –ª–∞–¥–æ–Ω–∏ –¥–ª—è –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        palm_center = [
            (thumb_pos[0] + pinky_pos[0] + index_tip_pos[0] + wrist_pos[0]) / 4,
            (thumb_pos[1] + pinky_pos[1] + index_tip_pos[1] + wrist_pos[1]) / 4,
            (thumb_pos[2] + pinky_pos[2] + index_tip_pos[2] + wrist_pos[2]) / 4
        ]
        
        # –í—ã—á–∏—Å–ª—è–µ–º —É–≥–ª—ã –ø–æ–≤–æ—Ä–æ—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –º–∞–ø–ø–∏–Ω–≥–æ–º
        # ROLL (Z-axis) - –≤—Ä–∞—â–µ–Ω–∏–µ –ø–æ —á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–µ (thumb-pinky –ª–∏–Ω–∏—è)
        roll = math.atan2(thumb_to_pinky[1], thumb_to_pinky[0])
        
        # PITCH (X-axis) - –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ –æ—Ç –∑–∞–ø—è—Å—Ç—å—è –∫ —É–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ–º—É –ø–∞–ª—å—Ü—É
        # –í–º–µ—Å—Ç–æ —É–≥–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        wrist_to_index_distance_raw = math.sqrt(
            wrist_to_index_tip[0]**2 + wrist_to_index_tip[1]**2 + wrist_to_index_tip[2]**2
        )
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∫ –¥–∏–∞–ø–∞–∑–æ–Ω—É —É–≥–ª–æ–≤ (-90 –¥–æ +90 –≥—Ä–∞–¥—É—Å–æ–≤)
        # –ë–∞–∑–æ–≤–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–º –ø–æ–ª–æ–∂–µ–Ω–∏–∏ —Ä—É–∫–∏
        base_distance = 120  # –ø—Ä–∏–º–µ—Ä–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–º –ø–æ–ª–æ–∂–µ–Ω–∏–∏
        distance_variation = wrist_to_index_distance_raw - base_distance
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –≤ —É–≥–æ–ª (—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å)
        pitch_sensitivity = 0.8
        pitch = distance_variation * pitch_sensitivity
        
        # YAW (Y-axis) - –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –¥–ª–∏–Ω–µ –ª–∏–Ω–∏–∏ thumb-pinky (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –±–æ–ª—å—à–∏–º –∏ –º–∏–∑–∏–Ω—Ü–µ–º)
        # –í–º–µ—Å—Ç–æ —É–≥–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –¥–ª–∏–Ω—É –¥–ª—è –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        thumb_pinky_length_raw = math.sqrt(
            thumb_to_pinky[0]**2 + thumb_to_pinky[1]**2 + thumb_to_pinky[2]**2
        )
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–ª–∏–Ω—É –∫ –¥–∏–∞–ø–∞–∑–æ–Ω—É —É–≥–ª–æ–≤
        # –ë–∞–∑–æ–≤–∞—è –¥–ª–∏–Ω–∞ –ø—Ä–∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–º –ø–æ–ª–æ–∂–µ–Ω–∏–∏ —Ä—É–∫–∏
        base_thumb_pinky_length = 150  # –ø—Ä–∏–º–µ—Ä–Ω–∞—è –¥–ª–∏–Ω–∞ –ø—Ä–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º —Ä–∞—Å–∫—Ä—ã—Ç–∏–∏ —Ä—É–∫–∏
        length_variation = thumb_pinky_length_raw - base_thumb_pinky_length
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –≤ —É–≥–æ–ª (—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å)
        yaw_sensitivity = 1.0
        yaw = length_variation * yaw_sensitivity
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        thumb_pinky_distance = math.sqrt(
            thumb_to_pinky[0]**2 + thumb_to_pinky[1]**2 + thumb_to_pinky[2]**2
        )
        

        
        middle_finger_length = math.sqrt(
            middle_base_to_tip[0]**2 + middle_base_to_tip[1]**2 + middle_base_to_tip[2]**2
        )
        
        return {
            'roll': math.degrees(roll),      # Z-axis: thumb-pinky rotation
            'pitch': pitch,                  # X-axis: distance-based pitch (already in degrees equivalent)
            'yaw': yaw,                      # Y-axis: thumb-pinky length-based (already in degrees equivalent)
            'thumb_pinky_distance': thumb_pinky_distance,
            'wrist_to_index_distance': wrist_to_index_distance_raw,
            'middle_finger_length': middle_finger_length,
            'pitch_distance_variation': distance_variation,  # –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ PITCH
            'thumb_pinky_length_raw': thumb_pinky_length_raw,  # –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ YAW
            'yaw_length_variation': length_variation,  # –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ YAW
            'center': palm_center[:2],
            'thumb_pos': thumb_pos[:2],
            'pinky_pos': pinky_pos[:2],
            'index_tip_pos': index_tip_pos[:2],
            'index_mcp_pos': index_mcp_pos[:2],
            'middle_tip_pos': middle_tip_pos[:2],
            'middle_mcp_pos': middle_mcp_pos[:2],
            'raw_vectors': {
                'thumb_to_pinky': thumb_to_pinky,
                'wrist_to_index_tip': wrist_to_index_tip,
                'middle_base_to_tip': middle_base_to_tip
            }
        }
    
    def detect_gesture(self, landmarks, frame_width, frame_height):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∂–µ—Å—Ç —Ä—É–∫–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –¥–µ—Ç–µ–∫—Ü–∏–µ–π –¥–ª—è –ª—é–±–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏"""
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –ø–∏–∫—Å–µ–ª–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º 3D –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        points = []
        points_3d = []
        for lm in landmarks:
            points.append([int(lm.x * frame_width), int(lm.y * frame_height)])
            points_3d.append([lm.x, lm.y, lm.z])
        
        # –ö–ª—é—á–µ–≤—ã–µ —Ç–æ—á–∫–∏ –ø–∞–ª—å—Ü–µ–≤
        thumb_tip = points[4]
        index_tip = points[8]
        middle_tip = points[12]
        ring_tip = points[16]
        pinky_tip = points[20]
        
        # –û—Å–Ω–æ–≤–∞–Ω–∏—è –∏ —Å—É—Å—Ç–∞–≤—ã –ø–∞–ª—å—Ü–µ–≤
        thumb_ip = points[3]   # –º–µ–∂—Ñ–∞–ª–∞–Ω–≥–æ–≤—ã–π —Å—É—Å—Ç–∞–≤ –±–æ–ª—å—à–æ–≥–æ –ø–∞–ª—å—Ü–∞
        index_pip = points[6]  # –ø—Ä–æ–∫—Å–∏–º–∞–ª—å–Ω—ã–π –º–µ–∂—Ñ–∞–ª–∞–Ω–≥–æ–≤—ã–π —Å—É—Å—Ç–∞–≤ —É–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ
        middle_pip = points[10] # –ø—Ä–æ–∫—Å–∏–º–∞–ª—å–Ω—ã–π –º–µ–∂—Ñ–∞–ª–∞–Ω–≥–æ–≤—ã–π —Å—É—Å—Ç–∞–≤ —Å—Ä–µ–¥–Ω–µ–≥–æ
        ring_pip = points[14]   # –ø—Ä–æ–∫—Å–∏–º–∞–ª—å–Ω—ã–π –º–µ–∂—Ñ–∞–ª–∞–Ω–≥–æ–≤—ã–π —Å—É—Å—Ç–∞–≤ –±–µ–∑—ã–º—è–Ω–Ω–æ–≥–æ
        pinky_pip = points[18]  # –ø—Ä–æ–∫—Å–∏–º–∞–ª—å–Ω—ã–π –º–µ–∂—Ñ–∞–ª–∞–Ω–≥–æ–≤—ã–π —Å—É—Å—Ç–∞–≤ –º–∏–∑–∏–Ω—Ü–∞
        
        wrist = points[0]
        
        # –£–ª—É—á—à–µ–Ω–Ω–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è –ø–æ–¥–Ω—è—Ç—ã—Ö –ø–∞–ª—å—Ü–µ–≤ —Å —É—á–µ—Ç–æ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ —Ä—É–∫–∏
        fingers_up = []
        
        # –ë–æ–ª—å—à–æ–π –ø–∞–ª–µ—Ü - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –∑–∞–ø—è—Å—Ç—å—è
        thumb_wrist_dist = self.get_distance(thumb_tip, wrist)
        thumb_ip_wrist_dist = self.get_distance(thumb_ip, wrist)
        fingers_up.append(1 if thumb_wrist_dist > thumb_ip_wrist_dist else 0)
        
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞–ª—å—Ü—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –∑–∞–ø—è—Å—Ç—å—è –≤–º–µ—Å—Ç–æ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è Y
        finger_tips = [index_tip, middle_tip, ring_tip, pinky_tip]
        finger_pips = [index_pip, middle_pip, ring_pip, pinky_pip]
        
        for tip, pip in zip(finger_tips, finger_pips):
            # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –∫–æ–Ω—á–∏–∫–∞ –ø–∞–ª—å—Ü–∞ –¥–æ –∑–∞–ø—è—Å—Ç—å—è
            tip_wrist_dist = self.get_distance(tip, wrist)
            # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Å—É—Å—Ç–∞–≤–∞ –ø–∞–ª—å—Ü–∞ –¥–æ –∑–∞–ø—è—Å—Ç—å—è
            pip_wrist_dist = self.get_distance(pip, wrist)
            
            # –ü–∞–ª–µ—Ü —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø–æ–¥–Ω—è—Ç—ã–º, –µ—Å–ª–∏ –∫–æ–Ω—á–∏–∫ –¥–∞–ª—å—à–µ –æ—Ç –∑–∞–ø—è—Å—Ç—å—è —á–µ–º —Å—É—Å—Ç–∞–≤
            # –£–º–µ–Ω—å—à–∞–µ–º –ø–æ—Ä–æ–≥ –¥–ª—è –±–æ–ª–µ–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            fingers_up.append(1 if tip_wrist_dist > pip_wrist_dist * 1.05 else 0)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–æ–π –ª–∞–¥–æ–Ω–∏
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –∫–æ–Ω—á–∏–∫–∞–º–∏ –ø–∞–ª—å—Ü–µ–≤
        finger_spread = 0
        finger_tips_all = [thumb_tip, index_tip, middle_tip, ring_tip, pinky_tip]
        
        for i in range(len(finger_tips_all)):
            for j in range(i + 1, len(finger_tips_all)):
                dist = self.get_distance(finger_tips_all[i], finger_tips_all[j])
                finger_spread += dist
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–∞—Ä
        finger_spread = finger_spread / 10
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∂–µ—Å—Ç—ã
        total_fingers = sum(fingers_up)
        
        # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –±–æ–ª—å—à–∏–º –∏ —É–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø–∞–ª—å—Ü–µ–º –¥–ª—è zoom/resize
        zoom_distance = self.get_distance(thumb_tip, index_tip)
        
        # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —É–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–º –∏ —Å—Ä–µ–¥–Ω–∏–º –ø–∞–ª—å—Ü–µ–º
        two_finger_distance = self.get_distance(index_tip, middle_tip)
        
        # –©–∏–ø–æ–∫ (–±–æ–ª—å—à–æ–π + —É–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–π –±–ª–∏–∑–∫–æ)
        is_pinching = zoom_distance < 40
        
        # OK –∂–µ—Å—Ç (–±–æ–ª—å—à–æ–π + —É–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–π –≤ –∫–æ–ª—å—Ü–µ)
        is_ok = is_pinching and fingers_up[2] == 1 and fingers_up[3] == 1 and fingers_up[4] == 1
        
        # –£–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞–ª–µ—Ü - —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ–¥–Ω—è—Ç
        is_pointing = (fingers_up[1] == 1 and 
                      sum(fingers_up[2:]) == 0 and 
                      fingers_up[0] == 0)
        
        # Zoom –∂–µ—Å—Ç (–±–æ–ª—å—à–æ–π + —É–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–π) –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
        is_zoom_gesture = (fingers_up[0] == 1 and 
                          fingers_up[1] == 1 and 
                          sum(fingers_up[2:]) == 0)
        
        # –ñ–µ—Å—Ç ‚úåÔ∏è –¥–ª—è —Å–º–µ–Ω—ã –æ–±—ä–µ–∫—Ç–∞ (–±–æ–ª—å—à–æ–π + —É–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–π + —Å—Ä–µ–¥–Ω–∏–π) - —É–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        # –û—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–± - —á–µ—Ä–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–¥–Ω—è—Ç—ã—Ö –ø–∞–ª—å—Ü–µ–≤
        # –£—á–∏—Ç—ã–≤–∞–µ–º, —á—Ç–æ –±–æ–ª—å—à–æ–π –ø–∞–ª–µ—Ü —á–∞—Å—Ç–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–∞–∫ –ø–æ–¥–Ω—è—Ç—ã–π
        is_two_fingers_basic = (fingers_up[1] == 1 and 
                               fingers_up[2] == 1 and 
                               fingers_up[0] == 1 and 
                               fingers_up[3] == 0 and 
                               fingers_up[4] == 0 and
                               total_fingers == 3)  # —Ç–µ–ø–µ—Ä—å –æ–∂–∏–¥–∞–µ–º 3 –ø–∞–ª—å—Ü–∞
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - —á–µ—Ä–µ–∑ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è (–µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–π –∏ —Å—Ä–µ–¥–Ω–∏–π –¥–∞–ª–µ–∫–æ –æ—Ç –∑–∞–ø—è—Å—Ç—å—è, –∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –±–ª–∏–∑–∫–æ
        index_wrist_dist = self.get_distance(index_tip, wrist)
        middle_wrist_dist = self.get_distance(middle_tip, wrist)
        ring_wrist_dist = self.get_distance(ring_tip, wrist)
        pinky_wrist_dist = self.get_distance(pinky_tip, wrist)
        thumb_wrist_dist = self.get_distance(thumb_tip, wrist)
        
        # –°—Ä–µ–¥–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        avg_extended = (index_wrist_dist + middle_wrist_dist) / 2
        avg_folded = (ring_wrist_dist + pinky_wrist_dist + thumb_wrist_dist) / 3
        
        is_two_fingers_distance = (avg_extended > avg_folded * 1.2 and 
                                  index_wrist_dist > 80 and 
                                  middle_wrist_dist > 80 and
                                  ring_wrist_dist < 70 and
                                  pinky_wrist_dist < 70)  # —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –±–æ–ª—å—à–æ–≥–æ –ø–∞–ª—å—Ü–∞
        
        # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –æ–±–∞ —Å–ø–æ—Å–æ–±–∞
        is_two_fingers_change = is_two_fingers_basic or is_two_fingers_distance
        
        # –û—Ç–∫—Ä—ã—Ç–∞—è –ª–∞–¥–æ–Ω—å - –≤—Å–µ –ø–∞–ª—å—Ü—ã –ø–æ–¥–Ω—è—Ç—ã –ò –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –Ω–∏–º–∏
        is_open_palm = (total_fingers >= 4 and finger_spread > 80)
        
        # –ß–µ—Ç—ã—Ä–µ –ø–∞–ª—å—Ü–∞ (–±–µ–∑ –±–æ–ª—å—à–æ–≥–æ) - –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∂–µ—Å—Ç –æ—Ç–∫—Ä—ã—Ç–æ–π –ª–∞–¥–æ–Ω–∏
        is_four_fingers = (sum(fingers_up[1:]) == 4 and 
                          fingers_up[0] == 0 and 
                          finger_spread > 60)
        
        return {
            'fingers_up': fingers_up,
            'total_fingers': total_fingers,
            'finger_spread': finger_spread,
            'is_pinching': is_pinching,
            'is_ok': is_ok,
            'is_pointing': is_pointing,
            'is_zoom_gesture': is_zoom_gesture,
            'is_two_fingers_change': is_two_fingers_change,
            'is_open_palm': is_open_palm,
            'is_four_fingers': is_four_fingers,
            'zoom_distance': zoom_distance,
            'two_finger_distance': two_finger_distance,
            'thumb_tip': thumb_tip,
            'index_tip': index_tip,
            'middle_tip': middle_tip
        }
    
    def handle_gesture_control(self, gesture, landmarks, frame_width, frame_height):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–º —á–µ—Ä–µ–∑ –∂–µ—Å—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏"""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –∂–µ—Å—Ç
        detected_gesture = None
        if gesture['is_pointing']:
            detected_gesture = "move"
        elif gesture['is_zoom_gesture']:
            detected_gesture = "resize"
        elif gesture['is_open_palm'] or gesture['is_four_fingers']:
            detected_gesture = "rotate"
        elif gesture['is_two_fingers_change']:
            detected_gesture = "change_object"
        
        # –°–∏—Å—Ç–µ–º–∞ –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∂–µ—Å—Ç–æ–≤
        if detected_gesture:
            if self.current_gesture == detected_gesture:
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Ç—Å—á–µ—Ç –¥–ª—è —Ç–æ–≥–æ –∂–µ –∂–µ—Å—Ç–∞
                self.gesture_timer += 1
                
                # –ï—Å–ª–∏ –∂–µ—Å—Ç —É–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–ª–≥–æ, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–µ–∂–∏–º
                if self.gesture_timer >= self.gesture_activation_delay:
                    if detected_gesture in ["move", "resize", "rotate"] and self.gesture_cooldown <= 0:
                        self.control_mode = detected_gesture
                        self.gesture_cooldown = 30
                    elif detected_gesture == "change_object" and self.gesture_cooldown <= 0:
                         total_objects = 1 + len(self.custom_models)  # —Ç–æ–ª—å–∫–æ –∫—É–± + –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –º–æ–¥–µ–ª–∏
                         self.object_type = (self.object_type + 1) % total_objects
                         self.gesture_cooldown = 60
                         self.gesture_timer = 0  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã –æ–±—ä–µ–∫—Ç–∞
            else:
                # –ù–æ–≤—ã–π –∂–µ—Å—Ç - –Ω–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å—á–µ—Ç –∑–∞–Ω–æ–≤–æ
                self.current_gesture = detected_gesture
                self.gesture_timer = 1
                
                # –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π –∂–µ—Å—Ç –≤—Ä–∞—â–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–∞–∫ –±–∞–∑–æ–≤–æ–µ
                if detected_gesture == "rotate":
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ —É–≥–ª—ã –∫–∞–∫ –±–∞–∑–æ–≤—ã–µ (–∫–∞–∫ –≤ Blender)
                    self.base_rotation_x += self.object_rotation_x
                    self.base_rotation_y += self.object_rotation_y
                    self.base_rotation_z += self.object_rotation_z
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ —É–≥–ª—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ –∂–µ—Å—Ç–∞
                    self.object_rotation_x = 0
                    self.object_rotation_y = 0
                    self.object_rotation_z = 0
        else:
            # –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∂–µ—Å—Ç–∞ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
            self.current_gesture = None
            self.gesture_timer = 0
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω)
        if self.control_mode == "move":
            # –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —É–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø–∞–ª—å—Ü–µ–º (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–µ–∂–∏–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω)
            if gesture['is_pointing'] and self.gesture_timer >= self.gesture_activation_delay:
                self.object_position = list(gesture['index_tip'])
                
        elif self.control_mode == "resize":
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ zoom –∂–µ—Å—Ç–æ–º (–±–æ–ª—å—à–æ–π + —É–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–π)
            if gesture['is_zoom_gesture'] and self.gesture_timer >= self.gesture_activation_delay:
                if self.last_pinch_distance is not None:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –±–æ–ª—å—à–∏–º –∏ —É–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø–∞–ª—å—Ü–µ–º
                    size_change = gesture['zoom_distance'] - self.last_pinch_distance
                    self.object_size += size_change * 0.8  # –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                    self.object_size = max(5, self.object_size)  # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏
                self.last_pinch_distance = gesture['zoom_distance']
            else:
                self.last_pinch_distance = None
                
        elif self.control_mode == "rotate":
            # –í—Ä–∞—â–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–æ–π –ª–∞–¥–æ–Ω—å—é –∏—Å–ø–æ–ª—å–∑—É—è –±–æ–ª—å—à–æ–π –ø–∞–ª–µ—Ü –∏ –º–∏–∑–∏–Ω–µ—Ü –∫–∞–∫ –æ—Ä–∏–µ–Ω—Ç–∏—Ä—ã
            if (gesture['is_open_palm'] or gesture['is_four_fingers']) and self.gesture_timer >= self.gesture_activation_delay:
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é —Ä—É–∫–∏ –≤ 3D
                hand_orientation = self.get_hand_orientation(landmarks, frame_width, frame_height)
                
                if self.last_hand_position is not None:
                    # –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —É–≥–ª–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –º–∞–ø–ø–∏–Ω–≥–æ–º
                    roll_change = hand_orientation['roll'] - self.last_hand_position['roll']
                    pitch_change = hand_orientation['pitch'] - self.last_hand_position['pitch']
                    yaw_change = hand_orientation['yaw'] - self.last_hand_position['yaw']
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥—ã —á–µ—Ä–µ–∑ 180/-180 –≥—Ä–∞–¥—É—Å–æ–≤
                    if abs(roll_change) > 180:
                        roll_change = roll_change - 360 if roll_change > 0 else roll_change + 360
                    if abs(pitch_change) > 180:
                        pitch_change = pitch_change - 360 if pitch_change > 0 else pitch_change + 360
                    if abs(yaw_change) > 180:
                        yaw_change = yaw_change - 360 if yaw_change > 0 else yaw_change + 360
                    
                    # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                    base_sensitivity = 1.0
                    
                    # –†–∞–∑–Ω–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–π –æ—Å–∏
                    roll_sensitivity = base_sensitivity * 1.5   # thumb-pinky –æ—á–µ–Ω—å –∑–∞–º–µ—Ç–µ–Ω
                    pitch_sensitivity = base_sensitivity * 1.2  # —É–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞–ª–µ—Ü
                    yaw_sensitivity = base_sensitivity * 1.2    # —Å—Ä–µ–¥–Ω–∏–π –ø–∞–ª–µ—Ü
                    
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–º –º–∞–ø–ø–∏–Ω–≥–æ–º
                    # ROLL: thumb-pinky –ª–∏–Ω–∏—è -> Z-axis (–≤—Ä–∞—â–µ–Ω–∏–µ –ø–æ —á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–µ)
                    self.object_rotation_z += roll_change * roll_sensitivity
                    
                    # PITCH: —É–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞–ª–µ—Ü –≤–≤–µ—Ä—Ö/–≤–Ω–∏–∑ -> X-axis (–∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ)
                    self.object_rotation_x -= pitch_change * pitch_sensitivity
                    
                    # YAW: –¥–ª–∏–Ω–∞ thumb-pinky –ª–∏–Ω–∏–∏ -> Y-axis
                    self.object_rotation_y += yaw_change * yaw_sensitivity
                    
                    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —É–≥–ª—ã
                    self.object_rotation_x = self.object_rotation_x % 360
                    self.object_rotation_y = self.object_rotation_y % 360
                    self.object_rotation_z = self.object_rotation_z % 360
                
                self.last_hand_position = hand_orientation
            else:
                self.last_hand_position = None
        
        # –£–º–µ–Ω—å—à–∞–µ–º –∫—É–ª–¥–∞—É–Ω
        if self.gesture_cooldown > 0:
            self.gesture_cooldown -= 1
    
    def apply_3d_rotation(self, point, rx, ry, rz):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç 3D –ø–æ–≤–æ—Ä–æ—Ç –∫ —Ç–æ—á–∫–µ"""
        x, y, z = point
        
        # –ü–æ–≤–æ—Ä–æ—Ç –≤–æ–∫—Ä—É–≥ X (pitch)
        cos_x, sin_x = math.cos(math.radians(rx)), math.sin(math.radians(rx))
        y, z = y * cos_x - z * sin_x, y * sin_x + z * cos_x
        
        # –ü–æ–≤–æ—Ä–æ—Ç –≤–æ–∫—Ä—É–≥ Y (yaw)
        cos_y, sin_y = math.cos(math.radians(ry)), math.sin(math.radians(ry))
        x, z = x * cos_y + z * sin_y, -x * sin_y + z * cos_y
        
        # –ü–æ–≤–æ—Ä–æ—Ç –≤–æ–∫—Ä—É–≥ Z (roll)
        cos_z, sin_z = math.cos(math.radians(rz)), math.sin(math.radians(rz))
        x, y = x * cos_z - y * sin_z, x * sin_z + y * cos_z
        
        return [x, y, z]
    
    def perspective_projection(self, point_3d, center_x, center_y, focal_length=800, camera_distance=500):
        """
        –ù–∞—Å—Ç–æ—è—â–∞—è –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–µ–∫—Ü–∏—è –∫–∞–∫ –≤ 3D –¥–≤–∏–∂–∫–∞—Ö
        
        Args:
            point_3d: 3D —Ç–æ—á–∫–∞ [x, y, z]
            center_x, center_y: —Ü–µ–Ω—Ç—Ä —ç–∫—Ä–∞–Ω–∞
            focal_length: —Ñ–æ–∫—É—Å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∫–∞–º–µ—Ä—ã (–±–æ–ª—å—à–µ = –º–µ–Ω—å—à–µ –∏—Å–∫–∞–∂–µ–Ω–∏–π)
            camera_distance: —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –∫–∞–º–µ—Ä—ã –¥–æ –æ–±—ä–µ–∫—Ç–∞
        
        Returns:
            [x_2d, y_2d]: 2D –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ —ç–∫—Ä–∞–Ω–µ
        """
        x, y, z = point_3d
        
        # –°–¥–≤–∏–≥–∞–µ–º –æ–±—ä–µ–∫—Ç –æ—Ç –∫–∞–º–µ—Ä—ã
        z_camera = z + camera_distance
        
        # –ò–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if z_camera <= 0:
            z_camera = 1
        
        # –ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–µ–∫—Ü–∏—è: x' = f * x / z, y' = f * y / z
        x_projected = (focal_length * x) / z_camera
        y_projected = (focal_length * y) / z_camera
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —ç–∫—Ä–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        screen_x = center_x + int(x_projected)
        screen_y = center_y + int(y_projected)
        
        return [screen_x, screen_y]
    
    def draw_rotated_cube(self, frame, center_x, center_y, size, rx, ry, rz):
        """–†–∏—Å—É–µ—Ç –∫—É–± —Å 3D –ø–æ–≤–æ—Ä–æ—Ç–æ–º –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –≥—Ä–∞–Ω–µ–π"""
        half_size = size // 2
        
        # 8 –≤–µ—Ä—à–∏–Ω –∫—É–±–∞ –≤ 3D
        vertices_3d = [
            [-half_size, -half_size, -half_size], [half_size, -half_size, -half_size],
            [half_size, half_size, -half_size], [-half_size, half_size, -half_size],
            [-half_size, -half_size, half_size], [half_size, -half_size, half_size],
            [half_size, half_size, half_size], [-half_size, half_size, half_size]
        ]
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º 3D –ø–æ–≤–æ—Ä–æ—Ç –∏ –ø—Ä–æ–µ—Ü–∏—Ä—É–µ–º –Ω–∞ 2D
        vertices_2d = []
        vertices_3d_rotated = []
        
        for vertex in vertices_3d:
            rotated = self.apply_3d_rotation(vertex, rx, ry, rz)
            vertices_3d_rotated.append(rotated)
            
            # –ù–∞—Å—Ç–æ—è—â–∞—è –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–µ–∫—Ü–∏—è
            projected = self.perspective_projection(rotated, center_x, center_y, 
                                                  focal_length=600, camera_distance=400)
            vertices_2d.append(projected)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞–Ω–∏ –∫—É–±–∞ (–ø–æ—Ä—è–¥–æ–∫ –≤–µ—Ä—à–∏–Ω –≤–∞–∂–µ–Ω –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)
        faces = [
            [0, 1, 2, 3],  # –ø–µ—Ä–µ–¥–Ω—è—è –≥—Ä–∞–Ω—å
            [4, 7, 6, 5],  # –∑–∞–¥–Ω—è—è –≥—Ä–∞–Ω—å
            [0, 4, 5, 1],  # –Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω—å
            [2, 6, 7, 3],  # –≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω—å
            [0, 3, 7, 4],  # –ª–µ–≤–∞—è –≥—Ä–∞–Ω—å
            [1, 5, 6, 2]   # –ø—Ä–∞–≤–∞—è –≥—Ä–∞–Ω—å
        ]
        
        # –¶–≤–µ—Ç–∞ –≥—Ä–∞–Ω–µ–π (–±–æ–ª–µ–µ —Å–µ—Ä—ã–µ –∏ –ø—Ä–∏–≥–ª—É—à–µ–Ω–Ω—ã–µ)
        colors = [
            (150, 120, 120),  # –ø—Ä–∏–≥–ª—É—à–µ–Ω–Ω—ã–π –∫—Ä–∞—Å–Ω—ã–π
            (120, 120, 150),  # –ø—Ä–∏–≥–ª—É—à–µ–Ω–Ω—ã–π —Å–∏–Ω–∏–π
            (120, 150, 120),  # –ø—Ä–∏–≥–ª—É—à–µ–Ω–Ω—ã–π –∑–µ–ª–µ–Ω—ã–π
            (150, 150, 120),  # –ø—Ä–∏–≥–ª—É—à–µ–Ω–Ω—ã–π –∂–µ–ª—Ç—ã–π
            (150, 120, 150),  # –ø—Ä–∏–≥–ª—É—à–µ–Ω–Ω–∞—è –º–∞–≥–µ–Ω—Ç–∞
            (120, 150, 150)   # –ø—Ä–∏–≥–ª—É—à–µ–Ω–Ω—ã–π —Ü–∏–∞–Ω
        ]
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é –≥–ª—É–±–∏–Ω—É –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä–∞–Ω–∏ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
        faces_with_depth = []
        for i, face in enumerate(faces):
            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é Z-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É –≥—Ä–∞–Ω–∏
            avg_z = sum(vertices_3d_rotated[j][2] for j in face) / len(face)
            faces_with_depth.append((avg_z, i, face))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≥—Ä–∞–Ω–∏ –ø–æ –≥–ª—É–±–∏–Ω–µ (–¥–∞–ª—å–Ω–∏–µ —Å–Ω–∞—á–∞–ª–∞ - painter's algorithm)
        faces_with_depth.sort(key=lambda x: x[0], reverse=True)
        
        # –†–∏—Å—É–µ–º –≥—Ä–∞–Ω–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–æ—Ç –¥–∞–ª—å–Ω–∏—Ö –∫ –±–ª–∏–∂–Ω–∏–º)
        for depth, face_index, face in faces_with_depth:
            face_points = np.array([vertices_2d[j] for j in face], np.int32)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—Ç–µ–Ω–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≥–ª—É–±–∏–Ω—ã
            depth_factor = max(0.4, min(1.0, 1.0 - (depth / (half_size * 2))))
            
            base_color = colors[face_index]
            shaded_color = (
                int(base_color[0] * depth_factor),
                int(base_color[1] * depth_factor),
                int(base_color[2] * depth_factor)
            )
            
            cv2.fillPoly(frame, [face_points], shaded_color)
            cv2.polylines(frame, [face_points], True, (0, 0, 0), 2)
        
        return frame
    
    def draw_rotated_pyramid(self, frame, center_x, center_y, size, rx, ry, rz):
        """–†–∏—Å—É–µ—Ç –ø–∏—Ä–∞–º–∏–¥—É —Å 3D –ø–æ–≤–æ—Ä–æ—Ç–æ–º –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –≥—Ä–∞–Ω–µ–π"""
        half_size = size // 2
        
        # 5 –≤–µ—Ä—à–∏–Ω –ø–∏—Ä–∞–º–∏–¥—ã –≤ 3D
        vertices_3d = [
            [-half_size, -half_size, -half_size],  # –æ—Å–Ω–æ–≤–∞–Ω–∏–µ
            [half_size, -half_size, -half_size],
            [half_size, half_size, -half_size],
            [-half_size, half_size, -half_size],
            [0, 0, half_size]  # –≤–µ—Ä—à–∏–Ω–∞ –ø–∏—Ä–∞–º–∏–¥—ã
        ]
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º 3D –ø–æ–≤–æ—Ä–æ—Ç –∏ –ø—Ä–æ–µ—Ü–∏—Ä—É–µ–º –Ω–∞ 2D
        vertices_2d = []
        vertices_3d_rotated = []
        
        for vertex in vertices_3d:
            rotated = self.apply_3d_rotation(vertex, rx, ry, rz)
            vertices_3d_rotated.append(rotated)
            
            # –ù–∞—Å—Ç–æ—è—â–∞—è –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–µ–∫—Ü–∏—è
            projected = self.perspective_projection(rotated, center_x, center_y, 
                                                  focal_length=600, camera_distance=400)
            vertices_2d.append(projected)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞–Ω–∏ –ø–∏—Ä–∞–º–∏–¥—ã
        faces = [
            [0, 1, 2, 3],  # –æ—Å–Ω–æ–≤–∞–Ω–∏–µ
            [0, 1, 4],     # –±–æ–∫–æ–≤–∞—è –≥—Ä–∞–Ω—å 1
            [1, 2, 4],     # –±–æ–∫–æ–≤–∞—è –≥—Ä–∞–Ω—å 2
            [2, 3, 4],     # –±–æ–∫–æ–≤–∞—è –≥—Ä–∞–Ω—å 3
            [3, 0, 4]      # –±–æ–∫–æ–≤–∞—è –≥—Ä–∞–Ω—å 4
        ]
        
        # –¶–≤–µ—Ç–∞ –≥—Ä–∞–Ω–µ–π (–±–æ–ª–µ–µ —Å–µ—Ä—ã–µ –∏ –ø—Ä–∏–≥–ª—É—à–µ–Ω–Ω—ã–µ)
        colors = [
            (120, 150, 120),  # –ø—Ä–∏–≥–ª—É—à–µ–Ω–Ω—ã–π –∑–µ–ª–µ–Ω—ã–π - –æ—Å–Ω–æ–≤–∞–Ω–∏–µ
            (150, 140, 120),  # –ø—Ä–∏–≥–ª—É—à–µ–Ω–Ω—ã–π –æ—Ä–∞–Ω–∂–µ–≤—ã–π
            (140, 150, 120),  # –ø—Ä–∏–≥–ª—É—à–µ–Ω–Ω—ã–π —Å–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π
            (120, 140, 150),  # –ø—Ä–∏–≥–ª—É—à–µ–Ω–Ω—ã–π –≥–æ–ª—É–±–æ–π
            (150, 120, 140)   # –ø—Ä–∏–≥–ª—É—à–µ–Ω–Ω—ã–π —Ä–æ–∑–æ–≤—ã–π
        ]
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é –≥–ª—É–±–∏–Ω—É –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä–∞–Ω–∏ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
        faces_with_depth = []
        for i, face in enumerate(faces):
            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é Z-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É –≥—Ä–∞–Ω–∏
            avg_z = sum(vertices_3d_rotated[j][2] for j in face) / len(face)
            faces_with_depth.append((avg_z, i, face))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≥—Ä–∞–Ω–∏ –ø–æ –≥–ª—É–±–∏–Ω–µ (–¥–∞–ª—å–Ω–∏–µ —Å–Ω–∞—á–∞–ª–∞ - painter's algorithm)
        faces_with_depth.sort(key=lambda x: x[0], reverse=True)
        
        # –†–∏—Å—É–µ–º –≥—Ä–∞–Ω–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–æ—Ç –¥–∞–ª—å–Ω–∏—Ö –∫ –±–ª–∏–∂–Ω–∏–º)
        for depth, face_index, face in faces_with_depth:
            face_points = np.array([vertices_2d[j] for j in face], np.int32)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—Ç–µ–Ω–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≥–ª—É–±–∏–Ω—ã
            depth_factor = max(0.4, min(1.0, 1.0 - (depth / (half_size * 2))))
            
            base_color = colors[face_index]
            shaded_color = (
                int(base_color[0] * depth_factor),
                int(base_color[1] * depth_factor),
                int(base_color[2] * depth_factor)
            )
            
            cv2.fillPoly(frame, [face_points], shaded_color)
            cv2.polylines(frame, [face_points], True, (0, 0, 0), 2)
        
        return frame

    def draw_floating_sphere(self, frame, center_x, center_y, size):
        """–†–∏—Å—É–µ—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ñ–µ—Ä—É"""
        animated_size = int(size * self.scale_factor * 0.5)
        
        cv2.circle(frame, (center_x, center_y), animated_size, (255, 255, 100), -1)
        cv2.circle(frame, (center_x, center_y), animated_size, (200, 200, 50), 3)
        
        highlight_offset = animated_size // 3
        cv2.circle(frame, 
                  (center_x - highlight_offset, center_y - highlight_offset), 
                  animated_size // 4, (255, 255, 255), -1)
        
        return frame
    
    def draw_custom_model(self, frame, center_x, center_y, size, rx, ry, rz, model_index):
        """–†–∏—Å—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é 3D –º–æ–¥–µ–ª—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –≥–ª—É–±–∏–Ω–µ"""
        if model_index >= len(self.custom_models):
            return frame
        
        model = self.custom_models[model_index]
        vertices_3d = model['vertices']
        faces = model['faces']
        
        # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –ø–æ–¥ —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä
        scale = size / 100  # –±–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏ 100
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º 3D –ø–æ–≤–æ—Ä–æ—Ç –∏ –ø—Ä–æ–µ—Ü–∏—Ä—É–µ–º –Ω–∞ 2D
        vertices_2d = []
        vertices_3d_rotated = []
        
        for vertex in vertices_3d:
            # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º
            scaled_vertex = [v * scale for v in vertex]
            
            # –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º
            rotated = self.apply_3d_rotation(scaled_vertex, rx, ry, rz)
            vertices_3d_rotated.append(rotated)
            
            # –ù–∞—Å—Ç–æ—è—â–∞—è –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–µ–∫—Ü–∏—è
            projected = self.perspective_projection(rotated, center_x, center_y, 
                                                  focal_length=300, camera_distance=400)
            vertices_2d.append(projected)
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é –≥–ª—É–±–∏–Ω—É (Z) –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä–∞–Ω–∏ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
        faces_with_depth = []
        
        for i, face in enumerate(faces):
            if len(face) >= 3:  # –¢–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ –≥—Ä–∞–Ω–∏
                try:
                    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é Z-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É –≥—Ä–∞–Ω–∏
                    valid_vertices = [j for j in face if j < len(vertices_3d_rotated)]
                    if len(valid_vertices) >= 3:
                        avg_z = sum(vertices_3d_rotated[j][2] for j in valid_vertices) / len(valid_vertices)
                        faces_with_depth.append((avg_z, i, face))
                except (IndexError, ValueError):
                    continue
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≥—Ä–∞–Ω–∏ –ø–æ –≥–ª—É–±–∏–Ω–µ (–¥–∞–ª—å–Ω–∏–µ —Å–Ω–∞—á–∞–ª–∞ - painter's algorithm)
        faces_with_depth.sort(key=lambda x: x[0], reverse=True)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è –≥—Ä–∞–Ω–µ–π
        num_faces = len(faces)
        colors = []
        for i in range(num_faces):
            # –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ —Å–µ—Ä—ã–µ –∏ –ø—Ä–∏–≥–ª—É—à–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞
            hue = (i * 137.5) % 360  # –∑–æ–ª–æ—Ç–æ–µ —Å–µ—á–µ–Ω–∏–µ –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            saturation = 0.3  # —É–º–µ–Ω—å—à–µ–Ω–∞ –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –±–æ–ª–µ–µ —Å–µ—Ä–æ–≥–æ –≤–∏–¥–∞
            value = 0.6       # —É–º–µ–Ω—å—à–µ–Ω–∞ —è—Ä–∫–æ—Å—Ç—å –¥–ª—è –±–æ–ª–µ–µ –ø—Ä–∏–≥–ª—É—à–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–∞
            
            # –ü—Ä–æ—Å—Ç–æ–µ HSV -> RGB –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
            c = value * saturation
            x = c * (1 - abs((hue / 60) % 2 - 1))
            m = value - c
            
            if 0 <= hue < 60:
                r, g, b = c, x, 0
            elif 60 <= hue < 120:
                r, g, b = x, c, 0
            elif 120 <= hue < 180:
                r, g, b = 0, c, x
            elif 180 <= hue < 240:
                r, g, b = 0, x, c
            elif 240 <= hue < 300:
                r, g, b = x, 0, c
            else:
                r, g, b = c, 0, x
            
            colors.append((int((r + m) * 255), int((g + m) * 255), int((b + m) * 255)))
        
        # –†–∏—Å—É–µ–º –≥—Ä–∞–Ω–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–æ—Ç –¥–∞–ª—å–Ω–∏—Ö –∫ –±–ª–∏–∂–Ω–∏–º)
        for depth, face_index, face in faces_with_depth:
            try:
                face_points = np.array([vertices_2d[j] for j in face if j < len(vertices_2d)], np.int32)
                if len(face_points) >= 3:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—Ç–µ–Ω–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≥–ª—É–±–∏–Ω—ã
                    depth_factor = max(0.3, min(1.0, 1.0 - (depth / (size * 2))))
                    
                    base_color = colors[face_index % len(colors)]
                    shaded_color = (
                        int(base_color[0] * depth_factor),
                        int(base_color[1] * depth_factor),
                        int(base_color[2] * depth_factor)
                    )
                    
                    cv2.fillPoly(frame, [face_points], shaded_color)
                    cv2.polylines(frame, [face_points], True, (0, 0, 0), 1)
            except (IndexError, ValueError):
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –≥—Ä–∞–Ω–∏
                continue
        
        return frame
    
    def draw_rotation_guides(self, frame, landmarks, frame_width, frame_height):
        """–†–∏—Å—É–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä—ã –¥–ª—è –≤—Ä–∞—â–µ–Ω–∏—è (–±–æ–ª—å—à–æ–π –ø–∞–ª–µ—Ü –∏ –º–∏–∑–∏–Ω–µ—Ü)"""
        if self.control_mode == "rotate" and (self.current_gesture == "rotate" and self.gesture_timer >= self.gesture_activation_delay):
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –±–æ–ª—å—à–æ–≥–æ –ø–∞–ª—å—Ü–∞ –∏ –º–∏–∑–∏–Ω—Ü–∞
            thumb_tip = landmarks[4]
            pinky_tip = landmarks[20]
            
            thumb_pos = [int(thumb_tip.x * frame_width), int(thumb_tip.y * frame_height)]
            pinky_pos = [int(pinky_tip.x * frame_width), int(pinky_tip.y * frame_height)]
            
            # –†–∏—Å—É–µ–º –ª–∏–Ω–∏—é –º–µ–∂–¥—É –±–æ–ª—å—à–∏–º –ø–∞–ª—å—Ü–µ–º –∏ –º–∏–∑–∏–Ω—Ü–µ–º (–æ—Å—å Roll)
            cv2.line(frame, tuple(thumb_pos), tuple(pinky_pos), (255, 255, 0), 3)
            
            # –†–∏—Å—É–µ–º –±–æ–ª—å—à–æ–π –ø–∞–ª–µ—Ü (Roll control)
            cv2.circle(frame, tuple(thumb_pos), 12, (255, 100, 100), -1)
            cv2.circle(frame, tuple(thumb_pos), 15, (255, 255, 255), 2)
            cv2.putText(frame, "ROLL", (thumb_pos[0] + 20, thumb_pos[1] - 10), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 100, 100), 2)
            
            # –†–∏—Å—É–µ–º –º–∏–∑–∏–Ω–µ—Ü (Roll control)
            cv2.circle(frame, tuple(pinky_pos), 12, (100, 100, 255), -1)
            cv2.circle(frame, tuple(pinky_pos), 15, (255, 255, 255), 2)
            cv2.putText(frame, "ROLL", (pinky_pos[0] + 20, pinky_pos[1] - 10), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.5, (100, 100, 255), 2)
            
            # –†–∏—Å—É–µ–º –æ—Ä–∏–µ–Ω—Ç–∏—Ä—ã –¥–ª—è PITCH (–æ—Ç –∑–∞–ø—è—Å—Ç—å—è –∫ —É–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ–º—É –ø–∞–ª—å—Ü—É)
            wrist = landmarks[0]
            index_tip = landmarks[8]
            
            wrist_pos = [int(wrist.x * frame_width), int(wrist.y * frame_height)]
            index_tip_pos = [int(index_tip.x * frame_width), int(index_tip.y * frame_height)]
            
            # –õ–∏–Ω–∏—è –æ—Ç –∑–∞–ø—è—Å—Ç—å—è –∫ —É–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ–º—É –ø–∞–ª—å—Ü—É (Pitch - X-axis)
            cv2.line(frame, tuple(wrist_pos), tuple(index_tip_pos), (255, 150, 100), 3)
            cv2.circle(frame, tuple(wrist_pos), 6, (255, 150, 100), -1)
            cv2.circle(frame, tuple(index_tip_pos), 8, (255, 150, 100), -1)
            cv2.circle(frame, tuple(index_tip_pos), 12, (255, 255, 255), 2)
            cv2.putText(frame, "PITCH", (index_tip_pos[0] + 15, index_tip_pos[1] - 15), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.4, (255, 150, 100), 2)
            
            # –†–∏—Å—É–µ–º –æ—Ä–∏–µ–Ω—Ç–∏—Ä—ã –¥–ª—è YAW (–¥–ª–∏–Ω–∞ thumb-pinky –ª–∏–Ω–∏–∏)
            # YAW —Ç–µ–ø–µ—Ä—å –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –¥–ª–∏–Ω–µ –∂–µ–ª—Ç–æ–π –ª–∏–Ω–∏–∏ –º–µ–∂–¥—É –±–æ–ª—å—à–∏–º –ø–∞–ª—å—Ü–µ–º –∏ –º–∏–∑–∏–Ω—Ü–µ–º
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É –æ —Ç–æ–º, —á—Ç–æ –¥–ª–∏–Ω–∞ –ª–∏–Ω–∏–∏ –≤–ª–∏—è–µ—Ç –Ω–∞ YAW
            line_center_x = (thumb_pos[0] + pinky_pos[0]) // 2
            line_center_y = (thumb_pos[1] + pinky_pos[1]) // 2
            cv2.putText(frame, "YAW LENGTH", (line_center_x - 30, line_center_y - 20), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.4, (100, 255, 100), 2)
    
    def draw_gesture_info(self, frame, gesture, control_mode):
        """–†–∏—Å—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∂–µ—Å—Ç–∞—Ö –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏"""
        height, width = frame.shape[:2]
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)
        panel_height = 300 if (self.current_gesture and self.gesture_timer > 0) else 250
        overlay = frame.copy()
        cv2.rectangle(overlay, (10, 10), (520, panel_height), (0, 0, 0), -1)
        cv2.addWeighted(overlay, 0.7, frame, 0.3, 0, frame)
        
        font = cv2.FONT_HERSHEY_SIMPLEX
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        cv2.putText(frame, "Interactive AR Hand Tracker", (20, 35), font, 0.7, (255, 255, 255), 2)
        
        # –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º —Å –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        mode_colors = {"move": (100, 255, 100), "resize": (255, 100, 100), "rotate": (100, 100, 255)}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º
        is_mode_active = (
            self.current_gesture and 
            self.gesture_timer >= self.gesture_activation_delay and
            ((control_mode == "move" and self.current_gesture == "move") or
             (control_mode == "resize" and self.current_gesture == "resize") or
             (control_mode == "rotate" and self.current_gesture == "rotate"))
        )
        
        mode_text = f"Mode: {control_mode.upper()}"
        if is_mode_active:
            mode_text += " [ACTIVE]"
            mode_color = mode_colors[control_mode]
        else:
            mode_text += " [WAITING]"
            mode_color = (150, 150, 150)  # —Å–µ—Ä—ã–π —Ü–≤–µ—Ç –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            
        cv2.putText(frame, mode_text, (20, 65), font, 0.6, mode_color, 2)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∂–µ—Å—Ç–∞
        if self.current_gesture and self.gesture_timer > 0:
            progress = min(self.gesture_timer / self.gesture_activation_delay, 1.0)
            progress_text = f"Activating {self.current_gesture}: {int(progress * 100)}%"
            progress_color = (255, 255, 0) if progress < 1.0 else (0, 255, 0)
            cv2.putText(frame, progress_text, (20, 260), font, 0.5, progress_color, 2)
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            bar_width = 200
            bar_height = 10
            bar_x, bar_y = 20, 275
            cv2.rectangle(frame, (bar_x, bar_y), (bar_x + bar_width, bar_y + bar_height), (100, 100, 100), -1)
            cv2.rectangle(frame, (bar_x, bar_y), (bar_x + int(bar_width * progress), bar_y + bar_height), progress_color, -1)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—ä–µ–∫—Ç–∞ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–∏–µ —É–≥–ª—ã –∫–∞–∫ –≤ Blender)
        total_rotation_x = self.base_rotation_x + self.object_rotation_x
        total_rotation_y = self.base_rotation_y + self.object_rotation_y
        total_rotation_z = self.base_rotation_z + self.object_rotation_z
        cv2.putText(frame, f"Size: {int(self.object_size)}", (20, 90), font, 0.5, (200, 200, 200), 1)
        cv2.putText(frame, f"Rotation X: {int(total_rotation_x)}¬∞ ({int(self.object_rotation_x)}¬∞)", (20, 110), font, 0.4, (200, 200, 200), 1)
        cv2.putText(frame, f"Rotation Y: {int(total_rotation_y)}¬∞ ({int(self.object_rotation_y)}¬∞)", (20, 125), font, 0.4, (200, 200, 200), 1)
        cv2.putText(frame, f"Rotation Z: {int(total_rotation_z)}¬∞ ({int(self.object_rotation_z)}¬∞)", (20, 140), font, 0.4, (200, 200, 200), 1)
        cv2.putText(frame, f"Position: ({self.object_position[0]}, {self.object_position[1]})", (20, 155), font, 0.4, (200, 200, 200), 1)
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è PITCH –∏ YAW (—Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ –≤—Ä–∞—â–µ–Ω–∏—è)
        if self.control_mode == 'rotate' and hasattr(self, 'last_hand_position') and self.last_hand_position:
            wrist_distance = self.last_hand_position.get('wrist_to_index_distance', 0)
            distance_var = self.last_hand_position.get('pitch_distance_variation', 0)
            thumb_pinky_length = self.last_hand_position.get('thumb_pinky_length_raw', 0)
            yaw_length_var = self.last_hand_position.get('yaw_length_variation', 0)
            
            cv2.putText(frame, f"Wrist-Index dist: {int(wrist_distance)}", (20, 170), font, 0.35, (150, 150, 150), 1)
            cv2.putText(frame, f"Pitch variation: {int(distance_var)}", (20, 185), font, 0.35, (150, 150, 150), 1)
            cv2.putText(frame, f"Thumb-Pinky length: {int(thumb_pinky_length)}", (20, 200), font, 0.35, (150, 150, 150), 1)
            cv2.putText(frame, f"Yaw variation: {int(yaw_length_var)}", (20, 215), font, 0.35, (150, 150, 150), 1)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –æ–±—ä–µ–∫—Ç–µ
        total_objects = 1 + len(self.custom_models)
        object_names = ["Cube"] + [model['name'] for model in self.custom_models]
        current_object_name = object_names[self.object_type] if self.object_type < len(object_names) else "Unknown"
        cv2.putText(frame, f"Object: {self.object_type}/{total_objects-1} - {current_object_name}", (20, 175), font, 0.5, (100, 255, 255), 2)
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        cv2.putText(frame, "Gestures:", (20, 195), font, 0.5, (255, 255, 100), 1)
        cv2.putText(frame, "1 finger - move | thumb+index - zoom", (20, 210), font, 0.4, (150, 150, 150), 1)
        cv2.putText(frame, "open palm - 3D rotate | peace sign ‚úåÔ∏è - change object", (20, 225), font, 0.4, (150, 150, 150), 1)
        cv2.putText(frame, "Rotation: thumb-pinky=ROLL+YAW, index distance=PITCH", (20, 240), font, 0.4, (100, 255, 255), 1)
        
        # –ü–∞–Ω–µ–ª—å —Å–ø—Ä–∞–≤–∞ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∂–µ—Å—Ç–æ–≤
        cv2.rectangle(overlay, (width-280, 10), (width-10, 180), (0, 0, 0), -1)
        cv2.addWeighted(overlay, 0.7, frame, 0.3, 0, frame)
        
        cv2.putText(frame, "Gestures:", (width-270, 35), font, 0.5, (255, 255, 100), 1)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–ª—å—Ü–µ–≤ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        fingers_text = "".join([str(f) for f in gesture['fingers_up']])
        cv2.putText(frame, f"Fingers: {fingers_text}", (width-270, 55), font, 0.4, (200, 200, 200), 1)
        cv2.putText(frame, f"Total: {gesture.get('total_fingers', 0)}", (width-270, 70), font, 0.4, (200, 200, 200), 1)
        cv2.putText(frame, f"Spread: {int(gesture.get('finger_spread', 0))}", (width-270, 85), font, 0.4, (200, 200, 200), 1)
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –¥–ª—è –∂–µ—Å—Ç–∞ ‚úåÔ∏è
        fingers = gesture.get('fingers_up', [0,0,0,0,0])
        if fingers[1] == 1 and fingers[2] == 1:
            debug_color = (100, 255, 100) if gesture.get('is_two_fingers_change', False) else (255, 100, 100)
            cv2.putText(frame, "‚úåÔ∏è Thumb+Index+Middle", (width-270, 100), font, 0.35, debug_color, 1)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, –µ—Å–ª–∏ –∂–µ—Å—Ç ‚úåÔ∏è –∞–∫—Ç–∏–≤–µ–Ω
        if gesture.get('is_two_fingers_change', False):
            cv2.putText(frame, "‚úåÔ∏è PEACE SIGN DETECTED!", (20, height-30), font, 0.6, (0, 255, 0), 2)
        
        gesture_status = [
            f"Pointing: {'‚úì' if gesture['is_pointing'] else '‚úó'}",
            f"Zoom gesture: {'‚úì' if gesture['is_zoom_gesture'] else '‚úó'}",
            f"Peace sign ‚úåÔ∏è (change): {'‚úì' if gesture['is_two_fingers_change'] else '‚úó'}",
            f"Open palm: {'‚úì' if gesture['is_open_palm'] else '‚úó'}",
            f"Four fingers: {'‚úì' if gesture['is_four_fingers'] else '‚úó'}"
        ]
        
        for i, status in enumerate(gesture_status):
            color = (100, 255, 100) if '‚úì' in status else (100, 100, 100)
            cv2.putText(frame, status, (width-270, 115 + i*15), font, 0.35, color, 1)
        
        return frame
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
        print("üéÆ Interactive AR Hand Tracker –∑–∞–ø—É—â–µ–Ω!")
        print("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–µ—Å—Ç–∞–º–∏ (—Å –∑–∞–¥–µ—Ä–∂–∫–æ–π 1 —Å–µ–∫—É–Ω–¥–∞):")
        print("- 1 –ø–∞–ª–µ—Ü (—É–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–π) - –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞")
        print("- –ë–æ–ª—å—à–æ–π + —É–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞–ª–µ—Ü - zoom (–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞)")
        print("- –û—Ç–∫—Ä—ã—Ç–∞—è –ª–∞–¥–æ–Ω—å (5 –ø–∞–ª—å—Ü–µ–≤) - 3D –≤—Ä–∞—â–µ–Ω–∏–µ —Å –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º:")
        print("  üîÑ –ë–æ–ª—å—à–æ–π –ø–∞–ª–µ—Ü ‚Üî –ú–∏–∑–∏–Ω–µ—Ü = ROLL (–ø–æ–≤–æ—Ä–æ—Ç –ø–æ —á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–µ)")
        print("  üëÜ –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ —É–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∞–ª—å—Ü–∞ = PITCH (–Ω–∞–∫–ª–æ–Ω –æ–±—ä–µ–∫—Ç–∞)")
        print("  üìè –î–ª–∏–Ω–∞ –ª–∏–Ω–∏–∏ –±–æ–ª—å—à–æ–π-–º–∏–∑–∏–Ω–µ—Ü = YAW (–ø–æ–≤–æ—Ä–æ—Ç –æ–±—ä–µ–∫—Ç–∞)")
        print("- –ó–Ω–∞–∫ –º–∏—Ä–∞ ‚úåÔ∏è (–±–æ–ª—å—à–æ–π + —É–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–π + —Å—Ä–µ–¥–Ω–∏–π) - —Å–º–µ–Ω–∞ —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞")
        print("- –£–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –∂–µ—Å—Ç 1 —Å–µ–∫—É–Ω–¥—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏!")
        print(f"üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã: –ö—É–± + {len(self.custom_models)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –º–æ–¥–µ–ª–µ–π")
        print("- ESC - –≤—ã—Ö–æ–¥")
        
        while True:
            ret, frame = self.cap.read()
            if not ret:
                print("–û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ –≤–∏–¥–µ–æ")
                break
            
            frame = cv2.flip(frame, 1)
            frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            
            results = self.hands.process(frame_rgb)
            
            height, width = frame.shape[:2]
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É–∫
            if results.multi_hand_landmarks:
                for hand_landmarks in results.multi_hand_landmarks:
                    # –†–∏—Å—É–µ–º —Å–∫–µ–ª–µ—Ç —Ä—É–∫–∏
                    self.mp_draw.draw_landmarks(
                        frame, hand_landmarks, self.mp_hands.HAND_CONNECTIONS,
                        self.mp_draw.DrawingSpec(color=(0, 255, 0), thickness=2, circle_radius=2),
                        self.mp_draw.DrawingSpec(color=(255, 0, 0), thickness=2)
                    )
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∂–µ—Å—Ç
                    gesture = self.detect_gesture(hand_landmarks.landmark, width, height)
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                    self.handle_gesture_control(gesture, hand_landmarks.landmark, width, height)
                    
                    # –†–∏—Å—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∂–µ—Å—Ç–∞—Ö
                    frame = self.draw_gesture_info(frame, gesture, self.control_mode)
                    
                    # –†–∏—Å—É–µ–º –æ—Ä–∏–µ–Ω—Ç–∏—Ä—ã –¥–ª—è –≤—Ä–∞—â–µ–Ω–∏—è
                    self.draw_rotation_guides(frame, hand_landmarks.landmark, width, height)
            else:
                # –ï—Å–ª–∏ —Ä—É–∫ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                empty_gesture = {
                    'is_pointing': False, 'is_zoom_gesture': False, 'is_two_fingers_change': False,
                    'is_pinching': False, 'is_open_palm': False, 'is_four_fingers': False,
                    'fingers_up': [0, 0, 0, 0, 0], 'finger_spread': 0
                }
                frame = self.draw_gesture_info(frame, empty_gesture, self.control_mode)
            
            # –†–∏—Å—É–µ–º –æ–±—ä–µ–∫—Ç –≤ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ —Å 3D –ø–æ–≤–æ—Ä–æ—Ç–æ–º
            total_objects = 1 + len(self.custom_models)  # —Ç–æ–ª—å–∫–æ –∫—É–± + –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –º–æ–¥–µ–ª–∏
            
            if self.object_type == 0:
                # –ü–µ—Ä–µ–¥–∞–µ–º —Å—É–º–º—É –±–∞–∑–æ–≤—ã—Ö –∏ —Ç–µ–∫—É—â–∏—Ö —É–≥–ª–æ–≤ (–∫–∞–∫ –≤ Blender)
                total_rotation_x = self.base_rotation_x + self.object_rotation_x
                total_rotation_y = self.base_rotation_y + self.object_rotation_y
                total_rotation_z = self.base_rotation_z + self.object_rotation_z
                frame = self.draw_rotated_cube(frame, self.object_position[0], self.object_position[1], 
                                             int(self.object_size), total_rotation_x, 
                                             total_rotation_y, total_rotation_z)
            elif self.object_type >= 1 and self.custom_models:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –º–æ–¥–µ–ª–∏
                model_index = (self.object_type - 1) % len(self.custom_models)
                # –ü–µ—Ä–µ–¥–∞–µ–º —Å—É–º–º—É –±–∞–∑–æ–≤—ã—Ö –∏ —Ç–µ–∫—É—â–∏—Ö —É–≥–ª–æ–≤ (–∫–∞–∫ –≤ Blender)
                total_rotation_x = self.base_rotation_x + self.object_rotation_x
                total_rotation_y = self.base_rotation_y + self.object_rotation_y
                total_rotation_z = self.base_rotation_z + self.object_rotation_z
                frame = self.draw_custom_model(frame, self.object_position[0], self.object_position[1],
                                             int(self.object_size), total_rotation_x,
                                             total_rotation_y, total_rotation_z, model_index)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è —Å—Ñ–µ—Ä—ã
            self.scale_factor += 0.02 * self.scale_direction
            if self.scale_factor >= 1.3 or self.scale_factor <= 0.7:
                self.scale_direction *= -1
            
            cv2.imshow('Interactive AR Hand Tracker', frame)
            
            key = cv2.waitKey(1) & 0xFF
            if key == 27:  # ESC
                break
        
        self.cap.release()
        cv2.destroyAllWindows()
        print("Interactive AR Hand Tracker –∑–∞–≤–µ—Ä—à–µ–Ω")

if __name__ == "__main__":
    ar_tracker = InteractiveARHandTracker()
    ar_tracker.run() 